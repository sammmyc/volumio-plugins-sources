{"version":3,"file":"MetadataAPI.js","sourceRoot":"","sources":["../../../src/lib/api/MetadataAPI.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6DAAuE;AACvE,8CAAsB;AACtB,6EAAsC;AACtC,2DAAmC;AAKnC,MAAM,WAAW;IAQf;;QANA,6CAAoE;QAEpE,sCAAgB;QAChB,2CAA4B;QAC5B,qCAAc;QAGZ,uBAAA,IAAI,8BAAkB;YACpB,MAAM,EAAE,EAAE;YACV,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,EAAE;SACb,MAAA,CAAC;QACF,uBAAA,IAAI,uBAAW,IAAI,sBAAM,EAAE,MAAA,CAAC;QAC5B,uBAAA,IAAI,4BAAgB,IAAI,MAAA,CAAC;QACzB,uBAAA,IAAI,sBAAU,IAAI,eAAK,CACrB,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EACzC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,MAAA,CAAC;IAE5C,CAAC;IAED,UAAU;QACR,uBAAA,IAAI,2BAAQ,CAAC,UAAU,EAAE,CAAC;QAC1B,uBAAA,IAAI,0BAAO,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IAED,cAAc,CAAC,WAAmB;QAChC,IAAI,WAAW,KAAK,uBAAA,IAAI,gCAAa,EAAE;YACrC,OAAO;SACR;QACD,uBAAA,IAAI,2BAAQ,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QACrC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,uBAAA,IAAI,4BAAgB,WAAW,MAAA,CAAC;IAClC,CAAC;IAyKD,KAAK,CAAC,SAAS,CAAC,MAA0E;QACxF,IAAI,CAAC,2BAAE,CAAC,cAAc,CAAC,mBAAmB,CAAC,EAAE;YAC3C,MAAM,KAAK,CAAC,2BAAE,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC,CAAC;SAC9D;QACD,IAAI;YACF,IAAI,IAAc,CAAC;YACnB,MAAM,QAAQ,GAAG,IAAA,aAAG,EAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7C,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE;gBAC1C,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;gBAC3B,IAAI,GAAG,MAAM,uBAAA,IAAI,0BAAO,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,uBAAA,IAAI,wDAAa,MAAjB,IAAI,EAAc,EAAE,GAAG,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;aACpG;iBACI,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;gBAChC,IAAI,GAAG,MAAM,uBAAA,IAAI,0BAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,uBAAA,IAAI,yDAAc,MAAlB,IAAI,EAAe,MAAM,CAAC,CAAC,CAAC;aACxF;iBACI,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACjC,IAAI,GAAG,MAAM,uBAAA,IAAI,0BAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,uBAAA,IAAI,0DAAe,MAAnB,IAAI,EAAgB,MAAM,CAAC,CAAC,CAAC;aAC1F;iBACI;gBACH,MAAM,KAAK,CAAC,yBAAyB,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;aACrD;YACD,OAAO,IAAI,CAAC;SACb;QACD,OAAO,CAAM,EAAE;YACb,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,MAAM,GAAG,CAAC,UAAU,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,MAAM,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,aAAa,CAAC,CAAC;YAClH,IAAI,GAAG,CAAC;YACR,IAAI,MAAM,EAAE;gBACV,GAAG,GAAG,GAAG,2BAAE,CAAC,OAAO,CAAC,gCAAgC,CAAC,KAAK,MAAM,EAAE,CAAC;aACpE;iBACI;gBACH,GAAG,GAAG,2BAAE,CAAC,OAAO,CAAC,gCAAgC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;aACtF;YACD,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;SAClB;IACH,CAAC;CACF;4QA1MkB,IAAc,EAAE,MAA2B,EAAE,QAAiC;IAC7F,MAAM,GAAG,GAAG,IAAA,aAAG,EAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IACxC,IAAI,MAAM,CAAC,IAAI,CAAC,uBAAA,IAAI,kCAAe,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACxD,OAAO,uBAAA,IAAI,kCAAe,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;KACvC;IAED,MAAM,OAAO,GAAG,QAAQ,EAAE,CAAC;IAC3B,uBAAA,IAAI,kCAAe,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;IACzC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE;QACnB,OAAO,uBAAA,IAAI,kCAAe,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IACH,OAAO,OAAO,CAAC;AAEjB,CAAC,qEAEe,IAAiB;IAC/B,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IACD,OAAO;QACL,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;QACzB,WAAW,EAAE,IAAI,CAAC,WAAW;QAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,KAAK,EAAE,IAAI,CAAC,KAAK;KAClB,CAAC;AACJ,CAAC,uEAEgB,IAAkB;IACjC,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IACD,OAAO;QACL,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;QACzB,WAAW,EAAE,IAAI,CAAC,WAAW;QAC7B,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI;QACnC,KAAK,EAAE,IAAI,CAAC,KAAK;KAClB,CAAC;AACJ,CAAC,yEAEiB,IAAmB;IACnC,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IACD,OAAO;QACL,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,WAAW,EAAE,IAAI,CAAC,WAAW;QAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;KAClB,CAAC;AACJ,CAAC,0CAED,KAAK,gDAA2B,MAA0C;IACxE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,MAAM,CAAC,MAAM,EAAE;QACjB,OAAO,uBAAA,IAAI,2BAAQ,CAAC,kBAAkB,CACpC,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,EACpC,EAAE,UAAU,EAAE,yBAAU,CAAC,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;KAC3D;IAED,MAAM,IAAI,GAAG,MAAM,uBAAA,IAAI,2BAAQ,CAAC,cAAc,CAC5C,MAAM,CAAC,IAAI,EACX,EAAE,UAAU,EAAE,yBAAU,CAAC,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;IAEpE,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;AAE/B,CAAC,+DAEY,MAAyD;IACpE,OAAO,uBAAA,IAAI,4DAAiB,MAArB,IAAI,EAAkB,MAAM,EAAE,MAAM,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,MAAM,GAAa;YACvB,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,IAAI;YACZ,KAAK,EAAE,IAAI;SACZ,CAAC;QAEF,2EAA2E;QAC3E,MAAM,WAAW,GAAG;YAClB,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,MAAM,EAAE,MAAM,CAAC,MAAM;SACtB,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,uBAAA,IAAI,qEAA0B,MAA9B,IAAI,EAA2B,WAAW,CAAC,CAAC;QAC/D,IAAI,IAAI,EAAE;YACR,MAAM,CAAC,IAAI,GAAG,uBAAA,IAAI,2DAAgB,MAApB,IAAI,EAAiB,IAAI,CAAC,CAAC;YACzC,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBACxC,MAAM,MAAM,GAAG,MAAM,uBAAA,IAAI,2BAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,yBAAU,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC3G,MAAM,CAAC,MAAM,GAAG,uBAAA,IAAI,6DAAkB,MAAtB,IAAI,EAAmB,MAAM,CAAC,CAAC;aAChD;YAED,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE;gBACtB,MAAM,aAAa,GAAG,MAAM,uBAAA,IAAI,2BAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3E,IAAI,aAAa,EAAE;oBACjB,MAAM,CAAC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;iBAC3C;aACF;SACF;QACD,wDAAwD;aACnD,IAAI,MAAM,CAAC,MAAM,EAAE;YACtB,MAAM,UAAU,GAAG,MAAM,uBAAA,IAAI,0DAAe,MAAnB,IAAI,EAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;YACtE,IAAI,UAAU,CAAC,MAAM,EAAE;gBACrB,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;aACnC;SACF;QAED,4BAA4B;QAC5B,MAAM,SAAS,GAAG,MAAM,uBAAA,IAAI,yDAAc,MAAlB,IAAI,EAAe;YACzC,IAAI,EAAE,MAAM,CAAC,KAAK;YAClB,MAAM,EAAE,MAAM,CAAC,MAAM;SACtB,CAAC,CAAC;QACH,IAAI,SAAS,EAAE;YACb,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;SAChC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,2CAED,KAAK,iDAA4B,MAA0C;IACzE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,MAAM,CAAC,MAAM,EAAE;QACjB,OAAO,uBAAA,IAAI,2BAAQ,CAAC,mBAAmB,CACrC,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,EACpC,EAAE,UAAU,EAAE,yBAAU,CAAC,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;KAC3D;IAED,MAAM,KAAK,GAAG,MAAM,uBAAA,IAAI,2BAAQ,CAAC,eAAe,CAC9C,MAAM,CAAC,IAAI,EACX,EAAE,UAAU,EAAE,yBAAU,CAAC,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;IAEpE,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;AAEhC,CAAC,iEAEa,MAA0C;IACtD,OAAO,uBAAA,IAAI,4DAAiB,MAArB,IAAI,EAAkB,OAAO,EAAE,MAAM,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,MAAM,GAAa;YACvB,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,IAAI;SACb,CAAC;QACF,MAAM,KAAK,GAAG,MAAM,uBAAA,IAAI,sEAA2B,MAA/B,IAAI,EAA4B,MAAM,CAAC,CAAC;QAC5D,MAAM,CAAC,KAAK,GAAG,uBAAA,IAAI,4DAAiB,MAArB,IAAI,EAAkB,KAAK,CAAC,CAAC;QAC5C,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;YACzB,MAAM,MAAM,GAAG,MAAM,uBAAA,IAAI,2BAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,yBAAU,CAAC,KAAK,EAAE,CAAC,CAAC;YACnG,MAAM,CAAC,MAAM,GAAG,uBAAA,IAAI,6DAAkB,MAAtB,IAAI,EAAmB,MAAM,CAAC,CAAC;SAChD;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,mEAEc,MAAyB;IACtC,OAAO,uBAAA,IAAI,4DAAiB,MAArB,IAAI,EAAkB,QAAQ,EAAE,MAAM,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,MAAM,GAAa;YACvB,MAAM,EAAE,IAAI;SACb,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YAChB,OAAO,MAAM,CAAC;SACf;QACD,MAAM,MAAM,GAAG,MAAM,uBAAA,IAAI,2BAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,yBAAU,CAAC,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAClI,MAAM,CAAC,MAAM,GAAG,uBAAA,IAAI,6DAAkB,MAAtB,IAAI,EAAmB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC;AAuCH,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;AAEtC,kBAAe,WAAW,CAAC","sourcesContent":["import Genius, { Album, Artist, Song, TextFormat } from 'genius-fetch';\nimport md5 from 'md5';\nimport np from '../NowPlayingContext';\nimport Cache from '../utils/Cache';\nimport { Metadata, MetadataAlbumInfo, MetadataArtistInfo, MetadataSongInfo } from 'now-playing-common';\n\ntype ItemType = 'song' | 'album' | 'artist';\n\nclass MetadataAPI {\n\n  #fetchPromises: Record<ItemType, Record<string, Promise<Metadata>>>;\n\n  #genius: Genius;\n  #accessToken: string | null;\n  #cache: Cache;\n\n  constructor() {\n    this.#fetchPromises = {\n      'song': {},\n      'album': {},\n      'artist': {}\n    };\n    this.#genius = new Genius();\n    this.#accessToken = null;\n    this.#cache = new Cache(\n      { song: 3600, album: 3600, artist: 3600 },\n      { song: 200, album: 200, artist: 200 });\n\n  }\n\n  clearCache() {\n    this.#genius.clearCache();\n    this.#cache.clear();\n  }\n\n  setAccessToken(accessToken: string) {\n    if (accessToken === this.#accessToken) {\n      return;\n    }\n    this.#genius.config({ accessToken });\n    this.clearCache();\n    this.#accessToken = accessToken;\n  }\n\n  #getFetchPromise(type: ItemType, params: Record<string, any>, callback: () => Promise<Metadata>) {\n    const key = md5(JSON.stringify(params));\n    if (Object.keys(this.#fetchPromises[type]).includes(key)) {\n      return this.#fetchPromises[type][key];\n    }\n\n    const promise = callback();\n    this.#fetchPromises[type][key] = promise;\n    promise.finally(() => {\n      delete this.#fetchPromises[type][key];\n    });\n    return promise;\n\n  }\n\n  #getSongSnippet(info: Song | null): MetadataSongInfo | null {\n    if (!info) {\n      return null;\n    }\n    return {\n      title: info.title.regular,\n      description: info.description,\n      image: info.image,\n      embed: info.embed\n    };\n  }\n\n  #getAlbumSnippet(info: Album | null): MetadataAlbumInfo | null {\n    if (!info) {\n      return null;\n    }\n    return {\n      title: info.title.regular,\n      description: info.description,\n      releaseDate: info.releaseDate?.text,\n      image: info.image\n    };\n  }\n\n  #getArtistSnippet(info: Artist | null): MetadataArtistInfo | null{\n    if (!info) {\n      return null;\n    }\n    return {\n      name: info.name,\n      description: info.description,\n      image: info.image\n    };\n  }\n\n  async #getSongByNameOrBestMatch(params: { name: string; artist?: string; }) {\n    if (!params.name) {\n      return null;\n    }\n\n    if (params.artist) {\n      return this.#genius.getSongByBestMatch(\n        { ...params, artist: params.artist },\n        { textFormat: TextFormat.Plain, obtainFullInfo: true });\n    }\n\n    const song = await this.#genius.getSongsByName(\n      params.name,\n      { textFormat: TextFormat.Plain, obtainFullInfo: true, limit: 1 });\n\n    return song.items[0] || null;\n\n  }\n\n  #getSongInfo(params: { name: string; album: string; artist?: string; }) {\n    return this.#getFetchPromise('song', params, async () => {\n      const result: Metadata = {\n        song: null,\n        artist: null,\n        album: null\n      };\n\n      // Do not include album, as compilation albums tend to result in false hits\n      const matchParams = {\n        name: params.name,\n        artist: params.artist\n      };\n      const song = await this.#getSongByNameOrBestMatch(matchParams);\n      if (song) {\n        result.song = this.#getSongSnippet(song);\n        if (song.artists && song.artists.primary) {\n          const artist = await this.#genius.getArtistById(song.artists.primary.id, { textFormat: TextFormat.Plain });\n          result.artist = this.#getArtistSnippet(artist);\n        }\n\n        if (result.song?.embed) {\n          const embedContents = await this.#genius.parseSongEmbed(result.song.embed);\n          if (embedContents) {\n            result.song.embedContents = embedContents;\n          }\n        }\n      }\n      // No song found, but still attempt to fetch artist info\n      else if (params.artist) {\n        const artistInfo = await this.#getArtistInfo({ name: params.artist });\n        if (artistInfo.artist) {\n          result.artist = artistInfo.artist;\n        }\n      }\n\n      // Finally, fetch album info\n      const albumInfo = await this.#getAlbumInfo({\n        name: params.album,\n        artist: params.artist\n      });\n      if (albumInfo) {\n        result.album = albumInfo.album;\n      }\n\n      return result;\n    });\n  }\n\n  async #getAlbumByNameOrBestMatch(params: { name: string; artist?: string; }) {\n    if (!params.name) {\n      return null;\n    }\n\n    if (params.artist) {\n      return this.#genius.getAlbumByBestMatch(\n        { ...params, artist: params.artist },\n        { textFormat: TextFormat.Plain, obtainFullInfo: true });\n    }\n\n    const album = await this.#genius.getAlbumsByName(\n      params.name,\n      { textFormat: TextFormat.Plain, obtainFullInfo: true, limit: 1 });\n\n    return album.items[0] || null;\n\n  }\n\n  #getAlbumInfo(params: { name: string; artist?: string; }) {\n    return this.#getFetchPromise('album', params, async () => {\n      const result: Metadata = {\n        album: null,\n        artist: null\n      };\n      const album = await this.#getAlbumByNameOrBestMatch(params);\n      result.album = this.#getAlbumSnippet(album);\n      if (album && album.artist) {\n        const artist = await this.#genius.getArtistById(album.artist.id, { textFormat: TextFormat.Plain });\n        result.artist = this.#getArtistSnippet(artist);\n      }\n      return result;\n    });\n  }\n\n  #getArtistInfo(params: { name: string; }) {\n    return this.#getFetchPromise('artist', params, async () => {\n      const result: Metadata = {\n        artist: null\n      };\n      if (!params.name) {\n        return result;\n      }\n      const artist = await this.#genius.getArtistsByName(params.name, { textFormat: TextFormat.Plain, obtainFullInfo: true, limit: 1 });\n      result.artist = this.#getArtistSnippet(artist.items[0]);\n      return result;\n    });\n  }\n\n  async fetchInfo(params: { type: ItemType; name: string; album?: string; artist?: string; }) {\n    if (!np.getConfigValue('geniusAccessToken')) {\n      throw Error(np.getI18n('NOW_PLAYING_ERR_METADATA_NO_TOKEN'));\n    }\n    try {\n      let info: Metadata;\n      const cacheKey = md5(JSON.stringify(params));\n      if (params.type === 'song' && params.album) {\n        const album = params.album;\n        info = await this.#cache.getOrSet('song', cacheKey, () => this.#getSongInfo({ ...params, album }));\n      }\n      else if (params.type === 'album') {\n        info = await this.#cache.getOrSet('album', cacheKey, () => this.#getAlbumInfo(params));\n      }\n      else if (params.type === 'artist') {\n        info = await this.#cache.getOrSet('artist', cacheKey, () => this.#getArtistInfo(params));\n      }\n      else {\n        throw Error(`Unknown metadata type ${params.type}`);\n      }\n      return info;\n    }\n    catch (e: any) {\n      const { message, statusCode, statusMessage } = e;\n      const status = (statusCode && statusMessage) ? `${statusCode} - ${statusMessage}` : (statusCode || statusMessage);\n      let msg;\n      if (status) {\n        msg = `${np.getI18n('NOW_PLAYING_ERR_METADATA_FETCH')}: ${status}`;\n      }\n      else {\n        msg = np.getI18n('NOW_PLAYING_ERR_METADATA_FETCH') + (message ? `: ${message}` : '');\n      }\n      throw Error(msg);\n    }\n  }\n}\n\nconst metadataAPI = new MetadataAPI();\n\nexport default metadataAPI;\n"]}