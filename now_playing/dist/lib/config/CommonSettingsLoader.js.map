{"version":3,"file":"CommonSettingsLoader.js","sourceRoot":"","sources":["../../../src/lib/config/CommonSettingsLoader.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,oDAA4B;AAC5B,6EAAsC;AACtC,kEAA0C;AAC1C,2DAA+F;AAE/F,MAAM,uBAAuB,GAAG,CAAC,MAAW,EAAE,GAAQ,EAAO,EAAE;IAC7D,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,OAAO,gBAAM,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,uBAAuB,CAAC,CAAC;KAC/D;IACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE;QACnG,OAAO,GAAG,CAAC;KACZ;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAqB,oBAAoB;IAEvC,MAAM,CAAC,GAAG,CAAmC,QAAW;QACtD,IAAI,QAAQ,KAAK,2CAAsB,CAAC,YAAY,EAAE;YACpD,OAAO,uBAAA,IAAI,yDAAyB,MAA7B,IAAI,CAA6D,CAAC;SAC1E;QAED,OAAO,uBAAA,IAAI,sDAAsB,MAA1B,IAAI,EAAuB,QAAQ,CAAC,CAAC;IAC9C,CAAC;CAqCF;AA7CD,uCA6CC;;IAlCG,MAAM,YAAY,GAAG,uBAAA,IAAI,sDAAsB,MAA1B,IAAI,EAAuB,2CAAsB,CAAC,YAAY,CAAC,CAAC;IAErF,QAAQ,YAAY,CAAC,MAAM,EAAE;QAC3B,KAAK,cAAc;YACjB,YAAY,CAAC,cAAc,GAAG,sBAAY,CAAC,gBAAgB,EAAE,CAAC;YAC9D,MAAM;QACR,KAAK,aAAa,CAAC;QACnB,KAAK,mBAAmB;YACtB,YAAY,CAAC,cAAc,GAAG,IAAI,CAAC;YACnC,MAAM;QACR;YACE,YAAY,CAAC,cAAc,GAAG,YAAY,CAAC,MAAM,CAAC;KACrD;IAED,QAAQ,YAAY,CAAC,QAAQ,EAAE;QAC7B,KAAK,aAAa,CAAC;QACnB,KAAK,qBAAqB;YACxB,YAAY,CAAC,gBAAgB,GAAG,IAAI,CAAC;YACrC,MAAM;QACR,KAAK,qBAAqB;YACxB,YAAY,CAAC,gBAAgB,GAAG,YAAY,CAAC,WAAW,IAAI,IAAI,CAAC;YACjE,MAAM;QACR;YACE,YAAY,CAAC,gBAAgB,GAAG,YAAY,CAAC,QAAQ,CAAC;KACzD;IAED,OAAO,YAAY,CAAC;AACtB,CAAC,mGAE8D,QAAW;IACxE,MAAM,QAAQ,GAAG,2BAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC7C,MAAM,MAAM,GAAG,gBAAM,CAAC,SAAS,CAAC,EAAE,EAAE,QAAQ,EAAE,oCAAe,CAAC,QAAQ,CAAC,EAAE,uBAAuB,CAAC,CAAC;IAClG,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import lodash from 'lodash';\nimport np from '../NowPlayingContext';\nimport ConfigHelper from './ConfigHelper';\nimport { CommonSettingsCategory, CommonSettingsOf, DefaultSettings } from 'now-playing-common';\n\nconst mergeSettingsCustomizer = (target: any, src: any): any => {\n  if (typeof target === 'object') {\n    return lodash.mergeWith(target, src, mergeSettingsCustomizer);\n  }\n  if (target === undefined || target === null || (typeof target === 'string' && target.trim() === '')) {\n    return src;\n  }\n  return target;\n};\n\nexport default class CommonSettingsLoader {\n\n  static get<T extends CommonSettingsCategory>(category: T) {\n    if (category === CommonSettingsCategory.Localization) {\n      return this.#getLocalizationSettings() as unknown as CommonSettingsOf<T>;\n    }\n\n    return this.#getDefaultNormalized(category);\n  }\n\n  static #getLocalizationSettings() {\n    const localization = this.#getDefaultNormalized(CommonSettingsCategory.Localization);\n\n    switch (localization.locale) {\n      case 'matchVolumio':\n        localization.resolvedLocale = ConfigHelper.getVolumioLocale();\n        break;\n      case 'matchClient':\n      case 'localeListDivider':\n        localization.resolvedLocale = null;\n        break;\n      default:\n        localization.resolvedLocale = localization.locale;\n    }\n\n    switch (localization.timezone) {\n      case 'matchClient':\n      case 'timezoneListDivider':\n        localization.resolvedTimezone = null;\n        break;\n      case 'matchGeoCoordinates':\n        localization.resolvedTimezone = localization.geoTimezone || null;\n        break;\n      default:\n        localization.resolvedTimezone = localization.timezone;\n    }\n\n    return localization;\n  }\n\n  static #getDefaultNormalized<T extends CommonSettingsCategory>(category: T): CommonSettingsOf<T> {\n    const settings = np.getConfigValue(category);\n    const merged = lodash.mergeWith({}, settings, DefaultSettings[category], mergeSettingsCustomizer);\n    return merged;\n  }\n}\n"]}